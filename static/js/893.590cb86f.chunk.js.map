{"version":3,"file":"static/js/893.590cb86f.chunk.js","mappings":"+KAGMA,EAAeC,EAAAA,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mSA6ClC,IA7Be,SAAAC,GACb,IAAkBC,EAAkCD,EAA5CE,SAAiBC,EAA2BH,EAA3BG,KAAMC,EAAqBJ,EAArBI,MAAOC,EAAcL,EAAdK,UAQtC,OACEC,EAAAA,EAAAA,KAACV,EAAY,CACXS,UAAWA,EACXF,KAAMA,EACNI,QAVY,SAAAC,GACVR,EAAMO,SACRP,EAAMO,QAAQC,EAAMC,OAAOC,QAAQN,MAEvC,EAOI,aAAYA,EAAMF,SAEjBD,GAGP,C,4DCnCMU,EAAYd,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+FAQxB,SAAAa,GAAY,OAAAA,EAATC,YAEHC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,4EAGF,IAkBL,IAfkB,SAAHiB,GAAsD,IAAhDf,EAAKe,EAALf,MAAKgB,EAAAD,EAAEE,SAAAA,OAAQ,IAAAD,GAAQA,EAAYE,EAAKH,EAAfd,SAC5C,OACEkB,EAAAA,EAAAA,MAACT,EAAS,CAACE,UAAWK,EAAShB,SAAA,EAC7BI,EAAAA,EAAAA,KAAA,SAAOe,QAASF,EAAMnB,MAAMsB,KAAKpB,SAAED,IAClCkB,IAGP,C,4DCvBMI,EAAiB1B,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0IAS3ByB,EAAc3B,EAAAA,GAAAA,MAAYkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,4eA+EhC,IA/Cc,SAAAC,GACZ,IACEsB,EAMEtB,EANFsB,KAAIG,EAMFzB,EALFG,KAAAA,OAAI,IAAAsB,EAAG,OAAMA,EAAAC,EAKX1B,EAJF2B,QAAAA,OAAO,IAAAD,EAAG,wHAAiCA,EAAAE,EAIzC5B,EAHF6B,MAAAA,OAAK,IAAAD,EAAG,iCAAgCA,EACxCE,EAEE9B,EAFF8B,YACA1B,EACEJ,EADFI,MAWF,OACEgB,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAA7B,SAAA,EACEI,EAAAA,EAAAA,KAACkB,EAAW,CACVQ,GAAIV,EACJA,KAAMA,EACNnB,KAAMA,EACNwB,QAASA,EACTE,MAAOA,EACPI,SAhBW,SAAAzB,GACf,IAAM0B,EAAW1B,EAAMC,OAAOL,MAE1BJ,EAAMiC,UACRjC,EAAMiC,SAAS,CAAEX,KAAMA,EAAMY,SAAUA,GAE3C,EAWMJ,YAAaA,GAAeR,EAC5BlB,MAAOA,EACP+B,aAAa,KACbC,UAAQ,KAEV9B,EAAAA,EAAAA,KAACiB,EAAc,CAAClB,UAAU,QAAOH,SAAE2B,MAGzC,C,sEC7EaQ,E,QAAaxC,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4J,yMC+DrC,EAvDqB,WACnB,IAAMuC,GAAWC,EAAAA,EAAAA,MACjBC,GAAgCC,EAAAA,EAAAA,UAAS,CACvCnB,KAAM,GACNoB,MAAO,GACPC,SAAU,KACVC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAJKM,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAMpBtB,EAA0BwB,EAA1BxB,KAAMoB,EAAoBI,EAApBJ,MAAOC,EAAaG,EAAbH,SAEfK,EAAU,SAAHpC,GAA4B,IAAtBU,EAAIV,EAAJU,KAAMY,EAAQtB,EAARsB,SACjBe,GAAWC,EAAAA,EAAAA,GAAA,GACd5B,EAAOY,GAGVa,GAAWI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIL,GAAaG,GAChC,EAWA,OACE7B,EAAAA,EAAAA,MAACiB,EAAAA,EAAU,CAACe,SAVG,SAAA5C,GACfA,EAAM6C,iBAEN,IAAMC,EAAO9C,EAAMC,OAEnB6B,GAASiB,EAAAA,EAAAA,IAAWT,IACpBQ,EAAKE,OACP,EAGiCtD,SAAA,EAC7BI,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAACxD,MAAM,OAAOiB,UAAQ,EAAAhB,UAC9BI,EAAAA,EAAAA,KAACoD,EAAAA,EAAK,CAACpC,KAAK,OAAOlB,MAAOkB,EAAMW,SAAUe,OAE5C1C,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAACxD,MAAM,QAAQiB,UAAQ,EAAAhB,UAC/BI,EAAAA,EAAAA,KAACoD,EAAAA,EAAK,CACJpC,KAAK,QACLnB,KAAK,QACLwB,QAAQ,8CACRE,MAAM,0BACNzB,MAAOsC,EACPT,SAAUe,OAGd1C,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAACxD,MAAM,WAAWiB,UAAQ,EAAAhB,UAClCI,EAAAA,EAAAA,KAACoD,EAAAA,EAAK,CACJpC,KAAK,WACLnB,KAAK,WACLC,MAAOuC,EACPV,SAAUe,OAGd1C,EAAAA,EAAAA,KAACqD,EAAAA,EAAM,CAACtD,UAAU,SAAQH,SAAC,eAGjC,E,UCvCA,EAlBiB,WACf,OACEkB,EAAAA,EAAAA,MAACT,EAAAA,EAAS,CAAAT,SAAA,EACRI,EAAAA,EAAAA,KAACsD,EAAAA,EAAM,CAAA1D,UACLI,EAAAA,EAAAA,KAAA,SAAAJ,SAAO,4BAETI,EAAAA,EAAAA,KAAA,MAAID,UAAU,UAASH,SAAC,yBACxBI,EAAAA,EAAAA,KAACuD,EAAY,KACbzC,EAAAA,EAAAA,MAAA,KAAAlB,SAAA,CAAG,0BACuB,KACxBI,EAAAA,EAAAA,KAACwD,EAAAA,GAAI,CAACzD,UAAU,OAAO0D,GAAG,IAAG7D,SAAC,mBAMtC,C,sECpBaS,E,QAAYd,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mN","sources":["components/Button.jsx","components/FormField.jsx","components/Input.jsx","components/auth/StyledForm.styled.js","components/auth/RegisterForm.jsx","pages/auth/Register.jsx","pages/auth/StyledDiv.styled.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  padding: 5px 20px;\n\n  cursor: pointer;\n  background-color: var(--color-blue);\n  color: white;\n  box-shadow: var(--def-box-shadow);\n  border-radius: 4px;\n  border: var(--def-border);\n  font-weight: 500;\n\n  &:hover {\n    background-color: var(--color-blue-light);\n  }\n`;\n\nconst Button = props => {\n  const { children: label, type, value, className } = props;\n\n  const onClick = event => {\n    if (props.onClick) {\n      props.onClick(event.target.dataset.value);\n    }\n  };\n\n  return (\n    <StyledButton\n      className={className}\n      type={type}\n      onClick={onClick}\n      data-value={value}\n    >\n      {label}\n    </StyledButton>\n  );\n};\n\nButton.propTypes = {\n  children: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport { styled, css } from 'styled-components';\n\nconst StyledDiv = styled.div`\n  width: 100%;\n\n  display: flex;\n  gap: 10px;\n\n  align-items: center;\n\n  ${({ $vertical }) =>\n    $vertical &&\n    css`\n      flex-direction: column;\n      align-items: flex-start;\n    `}\n`;\n\nconst FormField = ({ label, vertical = false, children: input }) => {\n  return (\n    <StyledDiv $vertical={vertical}>\n      <label htmlFor={input.props.name}>{label}</label>\n      {input}\n    </StyledDiv>\n  );\n};\n\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  vertical: PropTypes.bool,\n};\n\nexport default FormField;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledErrorDiv = styled.div`\n  display: none;\n\n  font-size: 0.8em;\n  background-color: rgba(255, 198, 198, 0.188);\n  color: red;\n  border-radius: 4px;\n`;\n\nconst StyledInput = styled.input`\n  width: 100%;\n  padding: 5px;\n\n  box-shadow: var(--def-box-shadow);\n  border-radius: 4px;\n  border: var(--def-border);\n\n  font-weight: 500;\n\n  &:active,\n  &:focus {\n    outline-style: ridge;\n    outline-color: rgba(0, 0, 128, 0.208);\n    outline-width: 2px;\n  }\n\n  &:valid {\n    border-color: green;\n    border-width: 2px;\n  }\n\n  &:invalid:focus {\n    border-color: red;\n    border-width: 3px;\n  }\n\n  &:invalid:focus + .error {\n    display: block;\n  }\n`;\n\nconst Input = props => {\n  const {\n    name,\n    type = 'text',\n    pattern = '[0-9a-zA-ZąęćśńłóżźĄĘĆŚŃŁÓŻŹ ]+',\n    title = 'Only letters, space and digits',\n    placeholder,\n    value,\n  } = props;\n\n  const onChange = event => {\n    const newValue = event.target.value;\n\n    if (props.onChange) {\n      props.onChange({ name: name, newValue: newValue });\n    }\n  };\n\n  return (\n    <>\n      <StyledInput\n        id={name}\n        name={name}\n        type={type}\n        pattern={pattern}\n        title={title}\n        onChange={onChange}\n        placeholder={placeholder || name}\n        value={value}\n        autoComplete=\"on\"\n        required\n      />\n      <StyledErrorDiv className=\"error\">{title}</StyledErrorDiv>\n    </>\n  );\n};\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 10px;\n\n  & > .button {\n    margin-top: 20px;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport FormField from 'components/FormField';\nimport Input from 'components/Input';\nimport Button from 'components/Button';\nimport { createUser } from 'redux/auth/operations';\n\nimport { StyledForm } from './StyledForm.styled';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n\n  const { name, email, password } = formData;\n\n  const onInput = ({ name, newValue }) => {\n    const newFormData = {\n      [name]: newValue,\n    };\n\n    setFormData({ ...formData, ...newFormData });\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    const form = event.target;\n\n    dispatch(createUser(formData));\n    form.reset();\n  };\n\n  return (\n    <StyledForm onSubmit={onSubmit}>\n      <FormField label=\"Name\" vertical>\n        <Input name=\"name\" value={name} onChange={onInput} />\n      </FormField>\n      <FormField label=\"Email\" vertical>\n        <Input\n          name=\"email\"\n          type=\"email\"\n          pattern=\"^[\\w\\-\\.]+@([\\w\\-]+\\.)+[\\w\\-]{2,4}$\"\n          title=\"Only valid email string\"\n          value={email}\n          onChange={onInput}\n        />\n      </FormField>\n      <FormField label=\"Password\" vertical>\n        <Input\n          name=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={onInput}\n        />\n      </FormField>\n      <Button className=\"button\">Register</Button>\n    </StyledForm>\n  );\n};\n\nexport default RegisterForm;\n","import { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\n\nimport RegisterForm from 'components/auth/RegisterForm';\nimport { StyledDiv } from './StyledDiv.styled';\n\nconst Register = () => {\n  return (\n    <StyledDiv>\n      <Helmet>\n        <title>Phonebook - Register</title>\n      </Helmet>\n      <h2 className=\"heading\">Create Your Account</h2>\n      <RegisterForm />\n      <p>\n        Do you have an account?{' '}\n        <Link className=\"link\" to=\"/\">\n          Log In...\n        </Link>\n      </p>\n    </StyledDiv>\n  );\n};\n\nexport default Register;\n","import styled from \"styled-components\";\n\nexport const StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 50px;\n\n  & > .heading {\n    font-weight: 500;\n  }\n\n  & .link {\n    color: var(--color-blue);\n\n    &:hover {\n      color: blue;\n    }\n  }\n`;\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","props","label","children","type","value","className","_jsx","onClick","event","target","dataset","StyledDiv","_ref","$vertical","css","_templateObject2","_ref2","_ref2$vertical","vertical","input","_jsxs","htmlFor","name","StyledErrorDiv","StyledInput","_props$type","_props$pattern","pattern","_props$title","title","placeholder","_Fragment","id","onChange","newValue","autoComplete","required","StyledForm","dispatch","useDispatch","_useState","useState","email","password","_useState2","_slicedToArray","formData","setFormData","onInput","newFormData","_defineProperty","_objectSpread","onSubmit","preventDefault","form","createUser","reset","FormField","Input","Button","Helmet","RegisterForm","Link","to"],"sourceRoot":""}