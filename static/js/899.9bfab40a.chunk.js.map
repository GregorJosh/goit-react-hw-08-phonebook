{"version":3,"file":"static/js/899.9bfab40a.chunk.js","mappings":"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","sources":["components/Button.jsx","components/FormField.jsx","components/Input.jsx","components/Container.jsx","redux/contacts/selectors.js","components/ContactForm.jsx","components/Contact.jsx","components/Section.jsx","components/ContactList.jsx","components/Notification.jsx","components/Loader.jsx","components/MessageBox.jsx","components/UserBox.jsx","components/NavBar.jsx","pages/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  padding: 5px 20px;\n\n  cursor: pointer;\n  background-color: var(--color-blue);\n  color: white;\n  box-shadow: var(--def-box-shadow);\n  border-radius: 4px;\n  border: var(--def-border);\n  font-weight: 500;\n\n  &:hover {\n    background-color: var(--color-blue-light);\n  }\n`;\n\nconst Button = props => {\n  const { children: label, type, value, className } = props;\n\n  const onClick = event => {\n    if (props.onClick) {\n      props.onClick(event.target.dataset.value);\n    }\n  };\n\n  return (\n    <StyledButton\n      className={className}\n      type={type}\n      onClick={onClick}\n      data-value={value}\n    >\n      {label}\n    </StyledButton>\n  );\n};\n\nButton.propTypes = {\n  children: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\nimport { styled, css } from 'styled-components';\n\nconst StyledDiv = styled.div`\n  width: 100%;\n\n  display: flex;\n  gap: 10px;\n\n  align-items: center;\n\n  ${({ $vertical }) =>\n    $vertical &&\n    css`\n      flex-direction: column;\n      align-items: flex-start;\n    `}\n`;\n\nconst FormField = ({ label, vertical = false, children: input }) => {\n  return (\n    <StyledDiv $vertical={vertical}>\n      <label htmlFor={input.props.name}>{label}</label>\n      {input}\n    </StyledDiv>\n  );\n};\n\nFormField.propTypes = {\n  label: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  vertical: PropTypes.bool,\n};\n\nexport default FormField;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledErrorDiv = styled.div`\n  display: none;\n\n  font-size: 0.8em;\n  background-color: rgba(255, 198, 198, 0.188);\n  color: red;\n  border-radius: 4px;\n`;\n\nconst StyledInput = styled.input`\n  width: 100%;\n  padding: 5px;\n\n  box-shadow: var(--def-box-shadow);\n  border-radius: 4px;\n  border: var(--def-border);\n\n  font-weight: 500;\n\n  &:active,\n  &:focus {\n    outline-style: ridge;\n    outline-color: rgba(0, 0, 128, 0.208);\n    outline-width: 2px;\n  }\n\n  &:valid {\n    border-color: green;\n    border-width: 2px;\n  }\n\n  &:invalid:focus {\n    border-color: red;\n    border-width: 3px;\n  }\n\n  &:invalid:focus + .error {\n    display: block;\n  }\n`;\n\nconst Input = props => {\n  const {\n    name,\n    type = 'text',\n    pattern = '[0-9a-zA-ZąęćśńłóżźĄĘĆŚŃŁÓŻŹ ]+',\n    title = 'Only letters, space and digits',\n    placeholder,\n    value,\n  } = props;\n\n  const onChange = event => {\n    const newValue = event.target.value;\n\n    if (props.onChange) {\n      props.onChange({ name: name, newValue: newValue });\n    }\n  };\n\n  return (\n    <>\n      <StyledInput\n        id={name}\n        name={name}\n        type={type}\n        pattern={pattern}\n        title={title}\n        onChange={onChange}\n        placeholder={placeholder || name}\n        value={value}\n        autoComplete=\"on\"\n        required\n      />\n      <StyledErrorDiv className=\"error\">{title}</StyledErrorDiv>\n    </>\n  );\n};\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledDiv = styled.div`\n  min-width: 290px;\n  max-width: 1200px;\n\n  margin: 0px auto;\n  padding: 20px 20px 0;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst Container = ({ children, className }) => (\n  <StyledDiv className={className}>{children}</StyledDiv>\n);\n\nContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.arrayOf(PropTypes.node),\n  ]).isRequired,\n  className: PropTypes.string,\n};\n\nexport default Container;\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport Button from 'components/Button';\nimport Input from 'components/Input';\nimport FormField from 'components/FormField';\n\nimport { setError } from 'redux/contacts/slice';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst StyledForm = styled.form`\n  padding: 20px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n\n  border: 2px solid rgba(128, 128, 128, 0.221);\n`;\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [formData, setFormData] = useState({\n    name: '',\n    phone: '',\n  });\n\n  const { name, phone } = formData;\n\n  const onChange = ({ name, newValue }) => {\n    const newFormData = {\n      [name]: newValue,\n    };\n\n    setFormData({ ...formData, ...newFormData });\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n\n    if (!searchSimiliarName(name)) {\n      dispatch(addContact({ name, number: phone }));\n    } else {\n      dispatch(setError(`${name} is already in contacts`));\n    }\n\n    setFormData({ name: '', phone: '' });\n  };\n\n  const searchSimiliarName = name => {\n    let result = false;\n\n    contacts.forEach(contact => {\n      if (contact.name.toLowerCase() === name.toLowerCase()) {\n        result = true;\n      }\n    });\n\n    return result;\n  };\n\n  return (\n    <StyledForm onSubmit={onSubmit}>\n      <FormField label=\"Name\" vertical>\n        <Input\n          name=\"name\"\n          pattern=\"^[a-ząćęłńóśźżA-ZĄĆĘŁŃÓŚŹŻа-яА-Я]+(([a-zA-Zа-яА-Я \\-'])?[a-ząćęłńóśźżA-ZĄĆĘŁŃÓŚŹŻа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={onChange}\n          value={name}\n        />\n      </FormField>\n\n      <FormField label=\"Number\" vertical>\n        <Input\n          name=\"phone\"\n          type=\"tel\"\n          pattern=\"\\+?[0-9]{1,4}?[\\-. ]?\\(?[0-9]{1,3}?\\)?[\\-. ]?[0-9]{1,4}[\\-. ]?[0-9]{1,4}[\\-. ]?[0-9]{1,9}\"\n          title=\"Phone number must be minimum 5 digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={onChange}\n          value={phone}\n        />\n      </FormField>\n      <Button type=\"submit\">Add contact</Button>\n    </StyledForm>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport Button from 'components/Button';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst StyledListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  @media screen and (min-width: 1200px) {\n    max-width: 60%;\n  }\n\n  > .name {\n    width: 30%;\n  }\n\n  > .phone {\n    width: 30%;\n    text-align: right;\n  }\n`;\n\nconst Contact = ({ name, phone, id }) => {\n  const dispatch = useDispatch();\n  const onRemove = id => dispatch(deleteContact(id));\n\n  return (\n    <StyledListItem>\n      <span className=\"name\">{name}</span>\n      <span className=\"phone\">{phone}</span>\n\n      <Button onClick={onRemove} value={id}>\n        Remove\n      </Button>\n    </StyledListItem>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default Contact;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Container from 'components/Container';\n\nconst StyledHeading = styled.h2`\n  font-weight: 600;\n`;\n\nconst Section = ({ className, title, children }) => {\n  return (\n    <section className={className}>\n      <Container>\n        {title && <StyledHeading>{title}</StyledHeading>}\n        {children}\n      </Container>\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport Contact from 'components/Contact';\nimport Section from 'components/Section';\nimport FormField from 'components/FormField';\nimport Input from 'components/Input';\n\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst StyledList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding-bottom: 50px;\n`;\n\nconst ContactList = () => {\n  const [filter, setFilter] = useState('');\n  const contacts = useSelector(selectContacts);\n  const onNewFilter = ({ newValue }) => setFilter(newValue);\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n\n    return contacts.filter(contact => {\n      const filterLC = filter.toLowerCase();\n      const contactNameLC = contact.name.toLowerCase();\n\n      return contactNameLC.includes(filterLC);\n    });\n  };\n\n  return (\n    <Section title=\"Contacts\">\n      <FormField label=\"Find contacts by name\" vertical>\n        <Input\n          name=\"filter\"\n          pattern=\"^[a-ząćęłńóśźżA-ZĄĆĘŁŃÓŚŹŻа-яА-Я]+(([a-zA-Zа-яА-Я \\-'])?[a-ząćęłńóśźżA-ZĄĆĘŁŃÓŚŹŻа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={onNewFilter}\n          placeholder=\"contact name\"\n          value={filter}\n        />\n      </FormField>\n\n      <StyledList>\n        {getFilteredContacts().map(({ id, name, number }) => (\n          <Contact key={id} name={name} phone={number} id={id} />\n        ))}\n      </StyledList>\n    </Section>\n  );\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Info = styled.div`\n  color: #613d03;\n`;\n\nconst Error = styled.div`\n  color: red;\n`;\n\nconst Notification = ({ type = 'info', message }) => {\n  return type === 'info' ? <Info>{message}</Info> : <Error>{message}</Error>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n  type: PropTypes.string,\n};\n\nexport default Notification;\n","import { Bars } from 'react-loader-spinner';\nimport styled from 'styled-components';\n\nimport Container from 'components/Container';\n\nconst StyledDiv = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Loader = () => {\n  return (\n    <Container>\n      <StyledDiv>\n        <Bars color=\"#000\" />\n      </StyledDiv>\n    </Container>\n  );\n};\n\nexport default Loader;\n","import { PropTypes } from 'prop-types';\n\nimport Container from 'components/Container';\nimport Notification from 'components/Notification';\n\nconst MessageBox = ({ type = 'info', message }) => {\n  return (\n    <section>\n      <Container>\n        <Notification type={type} message={message} />\n      </Container>\n    </section>\n  );\n};\n\nMessageBox.propTypes = {\n  message: PropTypes.string.isRequired,\n  type: PropTypes.string,\n};\n\nexport default MessageBox;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { logoutUser } from 'redux/auth/operations';\nimport avatar from 'images/simple-avatar.png';\nimport useAuth from 'hooks/useAuth';\n\nconst UserBoxDiv = styled.div`\n  position: relative;\n\n  & > .button {\n    padding: 5px;\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    width: 100%;\n\n    & > .image {\n      width: 30px;\n    }\n  }\n\n  & > .list {\n    display: ${({ $isOpen }) => ($isOpen ? 'block' : 'none')};\n    position: absolute;\n    right: 0;\n    width: 100%;\n\n    & > .item {\n      width: 100%;\n\n      & > button {\n        width: 100%;\n        padding: 0.5em;\n      }\n    }\n  }\n`;\n\nconst UserBox = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n\n  const closeMenu = useCallback(\n    event => {\n      if (\n        event.target.nodeName !== 'SPAN' &&\n        event.target.nodeName !== 'IMG' &&\n        event.target.nodeName !== 'BUTTON' &&\n        isOpen\n      ) {\n        setIsOpen(false);\n      }\n    },\n    [isOpen]\n  );\n\n  useEffect(() => {\n    document.addEventListener('click', closeMenu);\n\n    return () => {\n      document.removeEventListener('click', closeMenu);\n    };\n  }, [closeMenu]);\n\n  return (\n    <UserBoxDiv $isOpen={isOpen} onClick={() => setIsOpen(!isOpen)}>\n      <button className=\"button\">\n        <img className=\"image\" src={avatar} alt=\"Simple human avatar\" />\n        <span>{user.email}</span>\n      </button>\n      <ul className=\"list\">\n        <li className=\"item\">\n          <button onClick={() => dispatch(logoutUser())}>Logout</button>\n        </li>\n      </ul>\n    </UserBoxDiv>\n  );\n};\n\nexport default UserBox;\n","import styled from 'styled-components';\n\nimport Container from './Container';\nimport UserBox from './UserBox';\n\nconst Header = styled.header`\n  padding-bottom: 20px;\n`;\n\nconst NavBarContainer = styled(Container)`\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nconst NavBar = () => {\n  return (\n    <Header>\n      <NavBarContainer>\n        <h1>Phonebook</h1>\n        <UserBox />\n      </NavBarContainer>\n    </Header>\n  );\n};\n\nexport default NavBar;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport Container from '../components/Container';\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactList';\nimport Notification from '../components/Notification';\nimport Loader from '../components/Loader';\nimport MessageBox from '../components/MessageBox';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { setError } from 'redux/contacts/slice';\nimport NavBar from 'components/NavBar';\nimport { Helmet } from 'react-helmet';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (error) {\n      setTimeout(() => {\n        dispatch(setError(null));\n      }, 5000);\n    }\n  }, [dispatch, error]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook - Contacts</title>\n      </Helmet>\n      <NavBar />\n      <Container>\n        <ContactForm />\n      </Container>\n\n      {isLoading && <Loader />}\n      {error && <MessageBox type=\"error\" message={error} />}\n\n      {contacts.length ? (\n        <ContactList />\n      ) : (\n        <Container>\n          <Notification message=\"There is no contacts on phonebook\" />\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","props","label","children","type","value","className","_jsx","onClick","event","target","dataset","StyledDiv","_ref","$vertical","css","_templateObject2","_ref2","_ref2$vertical","vertical","input","_jsxs","htmlFor","name","StyledErrorDiv","StyledInput","_props$type","_props$pattern","pattern","_props$title","title","placeholder","_Fragment","id","onChange","newValue","autoComplete","required","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","StyledForm","useSelector","dispatch","useDispatch","_useState","useState","phone","_useState2","_slicedToArray","formData","setFormData","newFormData","_defineProperty","_objectSpread","searchSimiliarName","result","forEach","contact","toLowerCase","onSubmit","preventDefault","setError","concat","addContact","number","FormField","Input","Button","StyledListItem","deleteContact","StyledHeading","Container","StyledList","filter","setFilter","Section","filterLC","includes","map","Contact","Info","Error","_ref$type","message","Bars","color","Notification","UserBoxDiv","$isOpen","isOpen","setIsOpen","user","useAuth","closeMenu","useCallback","nodeName","useEffect","document","addEventListener","removeEventListener","src","alt","email","logoutUser","Header","NavBarContainer","UserBox","fetchContacts","setTimeout","Helmet","NavBar","ContactForm","Loader","MessageBox","length","ContactList"],"sourceRoot":""}